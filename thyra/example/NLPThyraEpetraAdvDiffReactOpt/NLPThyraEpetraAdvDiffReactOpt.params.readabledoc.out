    Forward Newton Max Iters : int = 20
      # Maximum number of iterations allows for the forward state
      # solver in eliminating the state equations/variables.
    Forward Newton Tolerance : double = -1
      # Tolarance used for the forward state solver in eliminating
      # the state equations/variables.
    NLP Type : string = First Order
      # The type of MOOCHO NLP subclass to use.
      #   Valid string values:
      #     {
      #       "First Order"
      #          Support the NLPInterfacePack::NLPFirstOrder interface which assumes
      #          that full adjoints for the objective and constraint derivatives are
      #          available.
      #       "Direct"
      #          Support the NLPInterfacePack::NLPDirect interface which only assumes
      #          that forward or direct sensitivities and state solves are supported.
      #     }
    Nonlinearly Eliminate States : bool = 0
      # If true, then the model's state equations and state variables
      # are nonlinearlly eliminated using a forward solver.
    Parameters Solution File Base Name : string = 
      # If specified, a file with this basename will be written to with
      # the final value of the parameters.  A different file for each
      # process will be created.  Note that these files can be used for the
      # initial guess for the parameters.
    Show Model Evaluator Trace : bool = 1
      # Determine if a trace of the objective function will be shown or not
      # when the NLP is evaluated.
    Solve Mode : string = Optimize
      # The type of solve to perform.
      #   Valid string values:
      #     {
      #       "Forward Solve"
      #          Only solve state equaitons f(x,p)=0 for states x
      #          given fixed parameters values p.
      #       "Optimize"
      #          Solve the simulation constrained optimization problem
      #            min  g(x,p)
      #            s.t. f(x,p)=0
      #          for the state varaibles x and parameters p.
      #     }
    State Solution File Base Name : string = 
      # If specified, a file with this basename will be written to with
      # the final value of the state variables.  A different file for each
      # process will be created.  Note that these files can be used for the
      # initial guess for the state variables.
    Use Built-in Inverse Objective Function : bool = 0
      # Use a built-in form of a simple inverse objection function instead
      # of a a response function contained in the underlying model evaluator
      # object itself.  The settings are contained in the sublist
      # "Inverse Objective Function Settings".
      # Note that this feature allows the client to form a useful type
      # of optimization problem just with a model that supports only the
      # parameterized state function f(x,p)=0.
    Use Finite Differences For Constraints : bool = 0
      # Use finite differences for missing constraint derivatives (Direct NLP only).
      # See the options in the sublist "Constraints Finite Difference Settings".
    Use Finite Differences For Objective : bool = 0
      # Use finite differences for missing objective function derivatives (Direct NLP only).
      # See the options in the sublist "Objective Finite Difference Settings".
    Constraints Finite Difference Settings -> 
      FD Method : string = order-one
        # The method used to compute the finite differences.
        #   Valid string values:
        #     {
        #       "order-one"
        #          Use O(eps) one sided finite differences (cramped bounds)
        #       "order-two"
        #          Use O(eps^2) one sided finite differences (cramped bounds)
        #       "order-two-central"
        #          Use O(eps^2) two sided central finite differences
        #       "order-two-auto"
        #          Use "order-two-central" when not cramped by bounds, otherwise use "order-two"
        #       "order-four"
        #          Use O(eps^4) one sided finite differences (cramped bounds)
        #       "order-four-central"
        #          Use O(eps^4) two sided central finite differences
        #       "order-four-auto"
        #          Use "order-four-central" when not cramped by bounds, otherwise use "order-four"
        #     }
      FD Step Length : double = -1
        # The length of the finite difference step to take.
        # A value of < 0.0 means that the step length will be determined automatically.
      FD Step Select Type : string = Absolute
        # Method used to select the finite difference step length.
        #   Valid string values:
        #     {
        #       "Absolute"
        #          Use absolute step size "FD Step Length"
        #       "Relative"
        #          Use relative step size "FD Step Length"*||xo||inf
        #     }
    Inverse Objective Function Settings -> 
      # Settings for the built-in inverse objective function.
      # See the outer parameter "Use Built-in Inverse Objective Function".
      Observation Index : int = -1
        # The index of the observation function, obs_idx.
        # If obs_idx < 0, then the observation will be the state vector x.
        # If obs_idx >= 0, then the observation will be the response function g(obs_idx).
      Observation Multiplier : double = 1
        # observationMultiplier
      Parameter Multiplier : double = 1e-06
        # parameterMultiplier
      Parameter Subvector Index : int = 0
        # The index of the parameter subvector that will be used in the
        # regularization term.
      Observation Target Vector -> 
        Explicit Array : string = {}
          # The vector specified explicitly as a string interpreted as a Teuchos::Array
          # object.  If this array is set, it will override the vector specified
          # by the above "File Name Base" parameter.
          # Note that a VectorSpaceBase object
          # must be set internally for this to work.
        File Name Base : string = 
          # Base-name of file(s) that will be used to read in the vector.
          # If this parameter is empty "", no file(s) will be read.
          # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
          # must be set internally for this to work.
        Scale By : double = 1
          # A factor by which the read in vector will be scaled by.
      Parameter Base Vector -> 
        Explicit Array : string = {}
          # The vector specified explicitly as a string interpreted as a Teuchos::Array
          # object.  If this array is set, it will override the vector specified
          # by the above "File Name Base" parameter.
          # Note that a VectorSpaceBase object
          # must be set internally for this to work.
        File Name Base : string = 
          # Base-name of file(s) that will be used to read in the vector.
          # If this parameter is empty "", no file(s) will be read.
          # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
          # must be set internally for this to work.
        Scale By : double = 1
          # A factor by which the read in vector will be scaled by.
    Objective Finite Difference Settings -> 
      FD Method : string = order-one
        # The method used to compute the finite differences.
        #   Valid string values:
        #     {
        #       "order-one"
        #          Use O(eps) one sided finite differences (cramped bounds)
        #       "order-two"
        #          Use O(eps^2) one sided finite differences (cramped bounds)
        #       "order-two-central"
        #          Use O(eps^2) two sided central finite differences
        #       "order-two-auto"
        #          Use "order-two-central" when not cramped by bounds, otherwise use "order-two"
        #       "order-four"
        #          Use O(eps^4) one sided finite differences (cramped bounds)
        #       "order-four-central"
        #          Use O(eps^4) two sided central finite differences
        #       "order-four-auto"
        #          Use "order-four-central" when not cramped by bounds, otherwise use "order-four"
        #     }
      FD Step Length : double = -1
        # The length of the finite difference step to take.
        # A value of < 0.0 means that the step length will be determined automatically.
      FD Step Select Type : string = Absolute
        # Method used to select the finite difference step length.
        #   Valid string values:
        #     {
        #       "Absolute"
        #          Use absolute step size "FD Step Length"
        #       "Relative"
        #          Use relative step size "FD Step Length"*||xo||inf
        #     }
    Parameter Guess -> 
      Explicit Array : string = {}
        # The vector specified explicitly as a string interpreted as a Teuchos::Array
        # object.  If this array is set, it will override the vector specified
        # by the above "File Name Base" parameter.
        # Note that a VectorSpaceBase object
        # must be set internally for this to work.
      File Name Base : string = 
        # Base-name of file(s) that will be used to read in the vector.
        # If this parameter is empty "", no file(s) will be read.
        # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
        # must be set internally for this to work.
      Scale By : double = 1
        # A factor by which the read in vector will be scaled by.
    State Guess -> 
      Explicit Array : string = {}
        # The vector specified explicitly as a string interpreted as a Teuchos::Array
        # object.  If this array is set, it will override the vector specified
        # by the above "File Name Base" parameter.
        # Note that a VectorSpaceBase object
        # must be set internally for this to work.
      File Name Base : string = 
        # Base-name of file(s) that will be used to read in the vector.
        # If this parameter is empty "", no file(s) will be read.
        # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
        # must be set internally for this to work.
      Scale By : double = 1
        # A factor by which the read in vector will be scaled by.
