// //////////////////////////////////////////////////////////////
// ConstrainedOptimizationPackPublicTypes.ud
//
// This is a set of using declarations for the types that ConstrainedOptimizationPack
// exposes publicly.  A namespace that wants to included these
// names should use:
//
// namespace MyNamespace {
//     #include "ConstrainedOptimizationPack/include/ConstrainedOptimizationPackPublicTypes.ud"
// }

#include "SparseLinAlgPack/include/SparseLinAlgPackPublicTypes.ud"
//#include "SparseSolverPack/include/SparseSolverPackPublicTypes.ud"
#include "NLPInterfacePack/include/NLPInterfacePackPublicTypes.ud"

using ConstrainedOptimizationPack::VariableBoundsTester;

using ConstrainedOptimizationPack::MatrixSymSecantUpdateable;
using ConstrainedOptimizationPack::MatrixSymAddDelUpdateable;
using ConstrainedOptimizationPack::MatrixSymAddDelUpdateableWithOpFactorized;
using ConstrainedOptimizationPack::MatrixIdentConcat;
using ConstrainedOptimizationPack::MeritFuncCalc1D;
using ConstrainedOptimizationPack::MeritFuncCalc;
using ConstrainedOptimizationPack::MeritFuncNLP;
using ConstrainedOptimizationPack::MeritFuncNLE;
using ConstrainedOptimizationPack::MeritFuncNLF;
using ConstrainedOptimizationPack::MeritFuncNLPDirecDeriv;
using ConstrainedOptimizationPack::MeritFuncPenaltyParam;
using ConstrainedOptimizationPack::MeritFuncPenaltyParams;
using ConstrainedOptimizationPack::DirectLineSearch_Strategy;

using ConstrainedOptimizationPack::MeritFuncCalc1DQuadratic;
using ConstrainedOptimizationPack::MeritFuncCalcNLP;
using ConstrainedOptimizationPack::MeritFuncNLPL1;
using ConstrainedOptimizationPack::MeritFuncNLPModL1;
//using ConstrainedOptimizationPack::MeritFuncCalcNLE;
//using ConstrainedOptimizationPack::MeritFuncCalcNLF;
//using ConstrainedOptimizationPack::MatrixHessianSuperBasic;
//using ConstrainedOptimizationPack::MatrixHessianSuperBasicInitDiagonal;
//using ConstrainedOptimizationPack::MatrixSymPosDefInvCholFactor;
using ConstrainedOptimizationPack::MatrixSymPosDefCholFactor;
//using ConstrainedOptimizationPack::MatrixSymPosDefLBFGS;
//using ConstrainedOptimizationPack::MatrixSymAddDelBunchKaufman;
using ConstrainedOptimizationPack::MatrixIdentConcatStd;
using ConstrainedOptimizationPack::DirectLineSearchArmQuad_Strategy;
using ConstrainedOptimizationPack::DirectLineSearchArmQuad_StrategySetOptions;

//using ConstrainedOptimizationPack::DecompositionSystem;
//using ConstrainedOptimizationPack::DecompositionSystemVarReduct;
//using ConstrainedOptimizationPack::DecompositionSystemVarReductImpNode;
//using ConstrainedOptimizationPack::DecompositionSystemCoordinate;
//using ConstrainedOptimizationPack::DecompositionSystemCoordinateDirect;
//using ConstrainedOptimizationPack::DecompositionSystemCoordinateAdjoint;

//using ConstrainedOptimizationPack::QPSolverWithBounds;
//using ConstrainedOptimizationPack::QPSolverRelaxed;
//using ConstrainedOptimizationPack::QPSCPD;
//using ConstrainedOptimizationPack::QPSchur;
//using ConstrainedOptimizationPack::QPSolverRelaxedQPSchurRangeSpace;
